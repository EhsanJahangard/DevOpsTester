// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPersistence.Contexts;

#nullable disable

namespace TestPersistence.Migrations
{
    [DbContext(typeof(DevOpsTesterContext))]
    [Migration("20240907145615_approve_TestModel")]
    partial class approve_TestModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestDomain.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Beginner",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Intermediate",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Advance",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("e8dcd2a6-2969-4247-bfc6-bf0661bf9ac5"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Expert",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Years_Experience")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Masters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e10f222c-edfa-44c0-8b7f-30ba9155e0c1"),
                            Bio = "Master",
                            DateBirth = new DateTime(2024, 9, 7, 18, 26, 14, 459, DateTimeKind.Local).AddTicks(7973),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Degree = "Bechlor",
                            Family = "Default",
                            Mobile = "09356735245",
                            Name = "Default",
                            Photo = "",
                            TitleBio = "Master",
                            UserCreate = "",
                            UserUpdate = "",
                            Website = "-",
                            Years_Experience = (byte)99
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CodeMeli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44755a41-744a-400b-bdb4-21d7faf80c38"),
                            DateBirth = new DateTime(1989, 9, 7, 18, 26, 14, 459, DateTimeKind.Local).AddTicks(8203),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Family = "جهانگرد",
                            Mobile = "09356735245",
                            Name = "احسان",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("55755a41-744a-400b-bdb4-21d7faf80c22"),
                            DateBirth = new DateTime(1979, 9, 7, 18, 26, 14, 459, DateTimeKind.Local).AddTicks(8214),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Family = "جهانگرد",
                            Mobile = "09356735246",
                            Name = "علی",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.PersonSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SkillId");

                    b.ToTable("PersonSkills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb4a12d6-a5a3-423a-b687-6e91ede340f3"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            PersonId = new Guid("44755a41-744a-400b-bdb4-21d7faf80c38"),
                            SkillId = new Guid("11244a41-744a-400b-bdb4-21d7faf80c38"),
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("0662e92f-180a-465b-9a1d-917c3a7d2048"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            PersonId = new Guid("55755a41-744a-400b-bdb4-21d7faf80c22"),
                            SkillId = new Guid("21244a41-744a-400b-bdb4-21d7faf80c38"),
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b45269b-9574-4d91-91ca-995407c9768c"),
                            Answer = "Container Framework",
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Letter = "Docker چیست؟",
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            QuestionTypeId = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("681eaeec-d7df-4b50-9b60-cedf1336bf4f"),
                            Answer = "Container Orchestration Open-Source",
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Letter = "Kubernetes چیست؟",
                            LevelId = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            QuestionTypeId = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionPhotos");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "چهار گزینه ای",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "صحیح و غلط",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تشریحی",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SkillType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Docker",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("21244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ansible",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("71244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "GitLab",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("31243b41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Git",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("ccbcbf5d-04f0-4685-9bb0-f5e6809e4ba9"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "CI/CD",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("3b1236f6-5e80-4daf-a1ae-467069954482"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ArgoCD",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("9ec6bdd5-4229-40ac-8c94-90f6d8f0502b"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Azure",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("c47c6a8b-46ee-4934-b94d-4bdbd50f22c1"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Jenkins",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("db408fb3-1259-4e27-bda0-f780ae29472e"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Firewall",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("d3171b12-5f2c-476f-a615-bb5e91a259c2"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "DNS",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("59c6de57-dbb2-412b-9e50-225148bbc2d5"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ceph Storage",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("5283694c-64da-4fad-88f2-5477f9addf9b"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Nginx",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("dc2d9d75-a436-4f14-83d0-ce4ac71ce4be"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Appache",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("d3006968-2f5e-42c2-8259-2980b912cb4e"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Python",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("045f958a-06be-4a09-8ed7-3080212c2b15"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Go Lang",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("6d030123-ec5d-4a78-ac56-044406e8bdf9"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Asp.Net",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("0f45c7df-be16-40be-9db6-c4f0dcfb44d2"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "C#",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("2d24d01d-a438-4795-9a41-31efed495096"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Sql Server",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("8847b1a3-2b5d-4d18-be27-937bc07ebd85"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "PostgreSql",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("ecf0bbb6-15f9-4d40-8ee9-dc12bf914e7b"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "MongoDB",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("851fd55a-d207-43a3-acfe-0e60d74d996a"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Redis",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("001b2413-14fa-49f5-a769-61f270df31a9"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Oracle",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("024a9cec-3c3d-42c7-a10b-57a8f96d0cbe"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "RabbitMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("2f65b030-1ea1-4107-999d-1d7dc014a5be"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Kafka",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("90b97811-fe46-4453-aff5-ec474617e611"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ActiveMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("fac717ed-d121-4bdf-aafa-5eafb3077e7d"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ZeroMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("72a72159-b204-4dae-9c92-25d7928ee66e"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ZooKeepr",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("339f9cc9-c5ec-40f0-a498-a3369c6fa1b3"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ocelot",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("8bb82c84-f06e-4044-9b4c-40ed11580989"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Kong",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("4d951a58-a1c3-44cd-af9d-807ac4f0e7c8"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "IIS",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("04ddf532-903e-47fb-8831-7f765bb6e7c0"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "CleanCode",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirtionTest")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("LengthMinuteTest")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestDomain.Models.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("TestDomain.Models.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExam")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TestId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("TestDomain.Models.PersonSkill", b =>
                {
                    b.HasOne("TestDomain.Models.Level", "Levels")
                        .WithMany("PersonSkills")
                        .HasForeignKey("LevelId");

                    b.HasOne("TestDomain.Models.Person", "People")
                        .WithMany("PersonSkills")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Skill", "Skills")
                        .WithMany("PersonSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Levels");

                    b.Navigation("People");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.HasOne("TestDomain.Models.Level", "Level")
                        .WithMany("Questions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionOption", b =>
                {
                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionPhoto", b =>
                {
                    b.HasOne("TestDomain.Models.Photo", "Photo")
                        .WithMany("QuestionPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany("QuestionPhotos")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestDomain.Models.Test", b =>
                {
                    b.HasOne("TestDomain.Models.Master", "Master")
                        .WithMany("Tests")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("TestDomain.Models.TestQuestion", b =>
                {
                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestDomain.Models.TestResult", b =>
                {
                    b.HasOne("TestDomain.Models.Person", "People")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestDomain.Models.Level", b =>
                {
                    b.Navigation("PersonSkills");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestDomain.Models.Master", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("TestDomain.Models.Person", b =>
                {
                    b.Navigation("PersonSkills");
                });

            modelBuilder.Entity("TestDomain.Models.Photo", b =>
                {
                    b.Navigation("QuestionPhotos");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("QuestionPhotos");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestDomain.Models.Skill", b =>
                {
                    b.Navigation("PersonSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
