// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPersistence.Contexts;

#nullable disable

namespace TestPersistence.Migrations
{
    [DbContext(typeof(DevOpsTesterContext))]
    [Migration("20240906161136_approve_Seed2")]
    partial class approve_Seed2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestionQuestionPhoto", b =>
                {
                    b.Property<Guid>("QuestionPhotosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionPhotosId", "QuestionsId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("QuestionQuestionPhoto");
                });

            modelBuilder.Entity("TestDomain.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Beginner",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Intermediate",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Advance",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("e8dcd2a6-2969-4247-bfc6-bf0661bf9ac5"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Expert",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Years_Experience")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Masters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72a755c3-38d6-4e93-8202-6f4350beb48c"),
                            Bio = "Master",
                            DateBirth = new DateTime(2024, 9, 6, 19, 41, 36, 84, DateTimeKind.Local).AddTicks(1545),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Degree = "Bechlor",
                            Family = "Default",
                            Mobile = "09356735245",
                            Name = "Default",
                            Photo = "",
                            TitleBio = "Master",
                            UserCreate = "",
                            UserUpdate = "",
                            Website = "-",
                            Years_Experience = (byte)99
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CodeMeli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44755a41-744a-400b-bdb4-21d7faf80c38"),
                            DateBirth = new DateTime(1989, 9, 6, 19, 41, 36, 84, DateTimeKind.Local).AddTicks(1746),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Family = "جهانگرد",
                            Mobile = "09356735245",
                            Name = "احسان",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("55755a41-744a-400b-bdb4-21d7faf80c22"),
                            DateBirth = new DateTime(1979, 9, 6, 19, 41, 36, 84, DateTimeKind.Local).AddTicks(1760),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Family = "جهانگرد",
                            Mobile = "09356735246",
                            Name = "علی",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.PersonSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SkillId");

                    b.ToTable("PersonSkills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a73d374-4c72-452e-aa85-4b02f28f0032"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            PersonId = new Guid("44755a41-744a-400b-bdb4-21d7faf80c38"),
                            SkillId = new Guid("11244a41-744a-400b-bdb4-21d7faf80c38"),
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("a8580d00-caec-4883-b9de-8fd58dbbc0c8"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            PersonId = new Guid("55755a41-744a-400b-bdb4-21d7faf80c22"),
                            SkillId = new Guid("21244a41-744a-400b-bdb4-21d7faf80c38"),
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd8f1a6c-d3c3-4f80-9b0e-4fa53d19ef06"),
                            Answer = "Container Framework",
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Letter = "Docker چیست؟",
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            QuestionTypeId = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("86dc11a5-631f-4250-af8e-d17054521eb4"),
                            Answer = "Container Orchestration Open-Source",
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Letter = "Kubernetes چیست؟",
                            LevelId = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            QuestionTypeId = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionPhotos");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "چهار گزینه ای",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "صحیح و غلط",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تشریحی",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SkillType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Docker",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("21244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ansible",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("71244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "GitLab",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("31243b41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Git",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("307793f0-3d0d-4abd-ab5a-d6685f606fae"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "CI/CD",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("d2165045-ff55-49ff-ad70-84fbeae5d2b8"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ArgoCD",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("6b762ba1-ab17-4858-b29c-e59cedf49961"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Azure",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("544d45f1-6f3c-4409-9e48-c79f98b4738a"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Jenkins",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("12809efc-7cd3-4e2f-9973-d2c8776a2060"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Firewall",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("de2e18a7-486b-4c9d-b845-392485a9f84a"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "DNS",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("ed8e9dea-3418-45cb-842d-f00468f7ab8a"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ceph Storage",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("3b9c246e-bc6e-49c9-8852-d824a1288ff0"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Nginx",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("108fce8a-866c-4e1d-b8f1-13fb3b0cd34b"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Appache",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("62df7083-ad8e-4f2c-8b4c-2065e8c54221"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Python",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("766542fd-f263-4a31-9c69-9eaee6ca0f6d"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Go Lang",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("86c78807-5994-43a5-b008-f1d160b33675"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Asp.Net",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("a88c3bc4-3ee9-432f-a02a-802558e39d4d"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "C#",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("f2cb381c-8b8b-4485-8fc7-1526a1341b39"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Sql Server",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("99700a6b-63d6-4f3b-916b-5792f71685af"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "PostgreSql",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("6bdff42b-bbba-4f95-b1f4-530eed817de5"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "MongoDB",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("a023a41c-58e0-43f9-b033-b4e9f2ef0c20"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Redis",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("3abd8797-9227-40b7-b09a-cf7aea5acd6a"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Oracle",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("eccfa4e4-8369-4ab1-91ec-05db66adb046"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "RabbitMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("1ff24aac-f94f-453c-9d58-dcc8ca74f16e"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Kafka",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("bc0778cc-1a0b-4dce-a70d-c7ba72b7f6d6"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ActiveMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("a4b5fa85-0f1a-4be9-b442-62031816d82d"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ZeroMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("092bda49-5756-4eac-bd91-58245e75d221"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ZooKeepr",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("9ba525d9-ce81-4425-88b5-9dc096488284"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ocelot",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("fa261a19-e2da-4e2e-bd90-8b1a3a743abc"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Kong",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("612ee372-4366-4397-bc36-f3b10a9c4154"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "IIS",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("cb59fe2d-db1b-420e-8bf3-589533d99a47"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "CleanCode",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirtionTest")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("LengthMinuteTest")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestDomain.Models.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("TestDomain.Models.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExam")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TestId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("QuestionQuestionPhoto", b =>
                {
                    b.HasOne("TestDomain.Models.QuestionPhoto", null)
                        .WithMany()
                        .HasForeignKey("QuestionPhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestDomain.Models.PersonSkill", b =>
                {
                    b.HasOne("TestDomain.Models.Level", "Levels")
                        .WithMany("PersonSkills")
                        .HasForeignKey("LevelId");

                    b.HasOne("TestDomain.Models.Person", "People")
                        .WithMany("PersonSkills")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Skill", "Skills")
                        .WithMany("PersonSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Levels");

                    b.Navigation("People");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.HasOne("TestDomain.Models.Level", "Level")
                        .WithMany("Questions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionOption", b =>
                {
                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestDomain.Models.Test", b =>
                {
                    b.HasOne("TestDomain.Models.Master", "Master")
                        .WithMany("Tests")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("TestDomain.Models.TestQuestion", b =>
                {
                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestDomain.Models.TestResult", b =>
                {
                    b.HasOne("TestDomain.Models.Person", "People")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestDomain.Models.Level", b =>
                {
                    b.Navigation("PersonSkills");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestDomain.Models.Master", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("TestDomain.Models.Person", b =>
                {
                    b.Navigation("PersonSkills");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestDomain.Models.Skill", b =>
                {
                    b.Navigation("PersonSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
