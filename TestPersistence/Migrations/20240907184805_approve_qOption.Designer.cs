// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestPersistence.Contexts;

#nullable disable

namespace TestPersistence.Migrations
{
    [DbContext(typeof(DevOpsTesterContext))]
    [Migration("20240907184805_approve_qOption")]
    partial class approve_qOption
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestDomain.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Beginner",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Intermediate",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Advance",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("e8dcd2a6-2969-4247-bfc6-bf0661bf9ac5"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Expert",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Years_Experience")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Masters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8b5ed43-3859-460b-9169-afc639e52122"),
                            Bio = "Master",
                            DateBirth = new DateTime(2024, 9, 7, 22, 18, 2, 787, DateTimeKind.Local).AddTicks(5004),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Degree = "Bechlor",
                            Family = "Default",
                            Mobile = "09356735245",
                            Name = "Default",
                            Photo = "",
                            TitleBio = "Master",
                            UserCreate = "",
                            UserUpdate = "",
                            Website = "-",
                            Years_Experience = (byte)99
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CodeMeli")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44755a41-744a-400b-bdb4-21d7faf80c38"),
                            DateBirth = new DateTime(1989, 9, 7, 22, 18, 2, 787, DateTimeKind.Local).AddTicks(5399),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Family = "جهانگرد",
                            Mobile = "09356735245",
                            Name = "احسان",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("55755a41-744a-400b-bdb4-21d7faf80c22"),
                            DateBirth = new DateTime(1979, 9, 7, 22, 18, 2, 787, DateTimeKind.Local).AddTicks(5406),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Family = "جهانگرد",
                            Mobile = "09356735246",
                            Name = "علی",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.PersonSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SkillId");

                    b.ToTable("PersonSkills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af8740b2-f22e-4f6b-a70d-0c2818aa813d"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            PersonId = new Guid("44755a41-744a-400b-bdb4-21d7faf80c38"),
                            SkillId = new Guid("11244a41-744a-400b-bdb4-21d7faf80c38"),
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("804682fb-519c-468c-9acc-693e835c70e6"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            PersonId = new Guid("55755a41-744a-400b-bdb4-21d7faf80c22"),
                            SkillId = new Guid("21244a41-744a-400b-bdb4-21d7faf80c38"),
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed3154da-f405-4b84-bd68-aa68f2da5ab9"),
                            Answer = "Container Framework",
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Letter = "Docker چیست؟",
                            LevelId = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            QuestionTypeId = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("c17e5a4f-181c-42b8-88fa-06f91055b446"),
                            Answer = "Container Orchestration Open-Source",
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Letter = "Kubernetes چیست؟",
                            LevelId = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            QuestionTypeId = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionPhotos");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15755f41-745a-300b-baa4-11d7faf80c99"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "چهار گزینه ای",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("25755f41-746a-410b-aab4-21d7faf80c88"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "صحیح و غلط",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("35755f41-747a-422b-bca4-31d7faf80c66"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تشریحی",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SkillType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Docker",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("21244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ansible",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("71244a41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "GitLab",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("31243b41-744a-400b-bdb4-21d7faf80c38"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Git",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("42cce210-093b-4450-beb9-d3e36b2a52fa"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "CI/CD",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("d373c222-6c94-4f3b-8fe0-e6ccdeee1226"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ArgoCD",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("39d2db43-a466-4629-916d-539e669b5aa2"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Azure",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("5d9f732c-c117-4f2f-8fc0-80a95167836c"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Jenkins",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("cc68f973-6b8e-4415-8291-051505fda22c"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Firewall",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("b39dafbc-24c2-4e7c-9ab0-898831fd966e"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "DNS",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("85a3ffbe-6485-4049-a257-709f38f4665a"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ceph Storage",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("833ccf52-c60b-46b8-9cab-52a576bcd867"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Nginx",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("7be24aa0-6a09-45eb-949d-8b0ce2b59ee7"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Appache",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("49ebfb37-0633-4bfb-b92a-db618ac78549"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Python",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("73665419-c7f2-4ad8-bec3-a57ca6df088e"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Go Lang",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("65de6edf-019c-4ba6-b178-af4780f8a202"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Asp.Net",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("febc795c-8f3c-49a8-a08c-d81c2f8a609f"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "C#",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("417dc110-de11-4cbe-aaec-ce3c525f1ab8"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Sql Server",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("0757a571-44d2-4f08-818a-d76cb364a889"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "PostgreSql",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("36465b17-02b6-428d-b636-eef349a0f3c6"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "MongoDB",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("9deb53b0-a4a7-4c44-8610-350ba03d6640"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Redis",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("4170ddd4-5e10-4bc7-aec7-1a6394b3d65a"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Oracle",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("bee0d203-35fd-4f48-8376-5e42299a061f"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "RabbitMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("e31d4cad-4953-4406-a267-bec2f3e42b56"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Kafka",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("b57176d8-ca2c-4430-9ec1-5bb79a2c488d"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ActiveMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("5a7df7f3-aa5e-46f9-aac5-a38207cc51e7"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ZeroMQ",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("29e8852c-14e8-4c71-8122-ac63afe9c6ec"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "ZooKeepr",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("cee46df6-b67c-4313-a4bd-6f293ab6efb0"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Ocelot",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("d53205ef-7e8e-4b64-bade-d2b17d16a120"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "Kong",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("2e32d2a9-10c0-48a1-8816-aa1beaaa7e95"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "IIS",
                            UserCreate = "",
                            UserUpdate = ""
                        },
                        new
                        {
                            Id = new Guid("f1f920ff-3829-43d4-b28a-3b7a20583fd1"),
                            DateCreate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SkillType = "Hard",
                            Title = "CleanCode",
                            UserCreate = "",
                            UserUpdate = ""
                        });
                });

            modelBuilder.Entity("TestDomain.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTest")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirtionTest")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("LengthMinuteTest")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeTest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("TestDomain.Models.TestQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("TestDomain.Models.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateExam")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TestId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("TestDomain.Models.PersonSkill", b =>
                {
                    b.HasOne("TestDomain.Models.Level", "Levels")
                        .WithMany("PersonSkills")
                        .HasForeignKey("LevelId");

                    b.HasOne("TestDomain.Models.Person", "People")
                        .WithMany("PersonSkills")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Skill", "Skills")
                        .WithMany("PersonSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Levels");

                    b.Navigation("People");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.HasOne("TestDomain.Models.Level", "Level")
                        .WithMany("Questions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionOption", b =>
                {
                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionPhoto", b =>
                {
                    b.HasOne("TestDomain.Models.Photo", "Photo")
                        .WithMany("QuestionPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany("QuestionPhotos")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TestDomain.Models.Test", b =>
                {
                    b.HasOne("TestDomain.Models.Master", "Master")
                        .WithMany("Tests")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("TestDomain.Models.TestQuestion", b =>
                {
                    b.HasOne("TestDomain.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestDomain.Models.TestResult", b =>
                {
                    b.HasOne("TestDomain.Models.Person", "People")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestDomain.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("TestDomain.Models.Level", b =>
                {
                    b.Navigation("PersonSkills");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestDomain.Models.Master", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("TestDomain.Models.Person", b =>
                {
                    b.Navigation("PersonSkills");
                });

            modelBuilder.Entity("TestDomain.Models.Photo", b =>
                {
                    b.Navigation("QuestionPhotos");
                });

            modelBuilder.Entity("TestDomain.Models.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("QuestionPhotos");
                });

            modelBuilder.Entity("TestDomain.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TestDomain.Models.Skill", b =>
                {
                    b.Navigation("PersonSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
